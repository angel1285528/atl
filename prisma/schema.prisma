//schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") //uses a direct connection
}

model socio {
    id             String       @id @unique
    firstName      String
    lastName       String
    secondLastName String?
    street         String
    streetNumber   String
    colonia        String
    postalCode     String
    city           String
    state          String
    phoneNumber    String
    email          String 
    urlSocioPhoto  String?
    urlSocioIne    String?
    urlIdDomicilio String?
    periodoDePago  String
    rol            Role         @default(socio)
    status         StatusSocios @default(Activo)
    fechaRegistro  DateTime     @default(now())
    familiares     familiares[]
    jugador        jugador[]
}



enum StatusSocios {
    Activo
    Ausente
    Baja
}

model jugador {
    playerId             String @id @unique 
    playerFechaRegistro  DateTime     @default(now())
    playerFirstName      String
    playerLastName       String
    playerSecondLastName String?
    categoria            String
    status               Status_Jugador @default(activo)
    socioId              String
    socio                socio          @relation(fields: [socioId], references: [id])
    //fechaNacimiento      DateTime
    //lugarNacimiento      String   
    //schoolarLevel        String
    //school               String
    //playerPhotoUrl       String?
//    schoolarGrade        String      
//     playerCellPhone       String?
//     playerEmail          String?
    // expedienteJugadores expedienteJugadores[]
    // estadoCuentaJugador estadoCuentaJugador[]
    // grupoEntrenamiento  grupoEntrenamiento @relation(fields: [grupoEntrenamientoId], references: [idGrupoEntrenamiento])
    // grupoEntrenamientoId String
}

// model grupoEntrenamiento{
//     idGrupoEntrenamiento   String @id @unique
//     grupoEntrenamiento    String  
//     jugador              jugador[]
//     jugadorId            String   
// }
// model estadoCuentaJugador {
//     idEstadoCuentaJugador String @id @unique
//     importeMensualidad    Int
//     tipoMensualidad       Int    
//     idJugadorEstadoCuenta String
//     jugador               jugador @relation(fields: [idJugadorEstadoCuenta], references: [playerId])  
// }
// model expedienteJugadores {
//     idExpedienteJugador String @id @unique 
//     actaDeNacimientoURL String?
//     actaDeNacimiento    Boolean
//     curpUrl             String?
//     curp                Boolean
//     identificacionUrl   String?
//     identificacion      Boolean
//     playerExpedienteId String
//     jugador             jugador @relation(fields: [playerExpedienteId], references: [playerId])
// }

model familiares {
    familyId             String  @id @default(cuid())
    familyFirstName      String
    familyLastName       String
    familySecondLastName String?
    familyPhoneNumber    String
    familyRelationship   String
    socioId              String // Clave externa para referenciar socio
    socio                socio   @relation(fields: [socioId], references: [id])
}

enum Role {
    socio
    jugador
    entrenador
    admin
}

enum Cuota {
    Estandar
    Hermano_Menor
    Preferencial
    Cortesia
}

enum Status_Jugador {
    activo
    baja
    lesionado
    baja_temporal
}
